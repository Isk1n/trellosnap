// Generated by CoffeeScript 1.8.0
(function() {
  var Edit, Trello;

  Edit = (function() {
    var annotate_canvas, append_canvas_html, build_trello, canvas_html, draw_image_to_canvas, init_trello;

    function Edit() {}

    Edit.screenshot = function(type, image_url, image_info) {
      var $image;
      if (image_info == null) {
        image_info = {};
      }
      $image = new Image;
      $image.src = image_url;
      return $image.onload = function() {
        return jQuery(function() {
          var $image_canvas, context;
          append_canvas_html(type, image_url, image_info, $image);
          $image_canvas = $("#canvas-image");
          context = $image_canvas[0].getContext('2d');
          draw_image_to_canvas(type, $image, image_info, context);
          return annotate_canvas($("#canvas-annotations"));
        });
      };
    };

    draw_image_to_canvas = function(type, $image, image_info, context) {
      if (image_info == null) {
        image_info = {};
      }
      if (type === "visible") {
        return context.drawImage($image, 0, 0);
      } else if (type === "partial") {
        return context.drawImage($image, image_info.x, image_info.y, image_info.w, image_info.h, 0, 0, image_info.w, image_info.h);
      }
    };

    append_canvas_html = function(type, image_url, image_info, $image) {
      if (image_info == null) {
        image_info = {};
      }
      if (type === "visible") {
        return $("main").append(canvas_html(image_url, $image.naturalWidth, $image.naturalHeight, 0, 0));
      } else if (type === "partial") {
        return $("main").append(canvas_html(image_url, image_info.w, image_info.h, image_info.x, image_info.y));
      }
    };

    canvas_html = function(image_url, w, h, x, y) {
      return "<section id=\"editor\">\n  <canvas id=\"canvas-image\" width=\"" + w + "\" height=\"" + h + "\"></canvas>\n  <canvas id=\"canvas-annotations\" width=\"" + w + "\" height=\"" + h + "\"></canvas>\n</section>\n\n<style>\n  #editor {\n    width      : " + w + "px;\n    height     : " + h + "px;\n    background : url(" + image_url + ") no-repeat -" + x + "px -" + y + "px;\n  }\n\n  main {\n    min-width: " + (w + 100) + "px;\n  }\n</style>";
    };

    annotate_canvas = function($canvas) {
      return $canvas.annotate({
        tools_container: "#header-main #annotate",
        color: 'red',
        type: 'rectangle'
      });
    };

    Edit.save_canvas = function() {
      return init_trello(function(access) {
        if (access) {
          return build_trello(access);
        }
      });
    };

    init_trello = function(callback) {
      return Trello.is_user_logged_in(function(username) {
        if (username) {
          return Trello.get_api_credentials(function(creds) {
            if (creds) {
              return Trello.get_client_token(creds, function(token) {
                if (token) {
                  return callback({
                    username: username,
                    creds: creds,
                    token: token
                  });
                } else {
                  return callback(false);
                }
              });
            } else {
              return callback(false);
            }
          });
        } else {
          return callback(false);
        }
      });
    };

    build_trello = function(access) {
      return Trello.get_boards(access, function(boards) {
        return console.log(boards);
      });
    };

    return Edit;

  })();

  chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {
    return Edit.screenshot(message.screenshot, message.image, message.image_info);
  });

  jQuery(function() {
    $("main").css({
      "min-height": $(window).innerHeight() - 70
    });
    return $("#upload").on("click", ".upload-button", function() {
      return Edit.save_canvas();
    });
  });

  Trello = (function() {
    function Trello() {}

    Trello.is_user_logged_in = function(callback) {
      return $.ajax({
        url: "https://trello.com/1/Members/me"
      }).done(function(data) {
        return callback(data.username);
      }).fail(function() {
        return callback(false);
      });
    };

    Trello.get_api_credentials = function(callback) {
      return $.ajax({
        url: "https://trello.com/1/appKey/generate"
      }).done(function(data) {
        var $html;
        $html = $($.parseHTML(data));
        return callback({
          api_key: $html.find("input#key").val(),
          api_secret: $html.find("input#secret").val()
        });
      }).fail(function() {
        return callback(false);
      });
    };

    Trello.get_client_token = function(creds, callback) {
      return $.ajax({
        url: "https://trello.com/1/authorize?key=" + creds.api_key + "&name=TrelloCapture&expiration=never&response_type=token&scope=read,write"
      }).done(function(data) {
        var $html;
        $html = $($.parseHTML(data));
        return $.ajax({
          type: 'POST',
          url: 'https://trello.com/1/token/approve',
          data: {
            approve: "Allow",
            requestKey: $html.find("input[name='requestKey']").val(),
            signature: $html.find("input[name='signature']").val()
          }
        }).done(function(data) {
          var token;
          $html = $($.parseHTML(data));
          token = $($html[5]).html().replace(RegExp(" ", "g"), "").replace(/\r\n/g, "").replace(/\n/g, "").replace(/\r/g, "");
          if (token && token.length === 64) {
            return callback(token);
          } else {
            return callback(false);
          }
        }).fail(function() {
          return callback(false);
        });
      }).fail(function() {
        return callback(false);
      });
    };

    Trello.get_boards = function(access, callback) {
      return $.ajax({
        url: "https://api.trello.com/1/members/" + access.username + "/boards?key=" + access.creds.api_key + "&token=" + access.token
      }).done(function(data) {
        return callback(data.filter(function(board) {
          return !board.closed;
        }));
      }).fail(function() {
        return callback(false);
      });
    };

    return Trello;

  })();

}).call(this);
